package logic;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;

import board.Deck;
import board.Grave;
import board.Upcards;
import entity.Card;
import entity.Color;
import entity.Player;

public class GameManager {
	private List<Player> players;
	private HintManager hintManager;
	private TokenManager tokenManager;
	private Queue<Player> turnQueue;
	private int turnCount;
	private int score;
	
	private boolean end;
	private int endCounter;
	
	private Deck deck;
	private Grave grave;
	private Upcards upcards;
	
	private Scanner scanner;
	
	public GameManager(List<Player> players) {
		this.players = new ArrayList<Player>();
		this.players.addAll(players);
		turnQueue = new LinkedList<Player>();
		turnQueue.addAll(players);
		
		hintManager = new HintManager();
		tokenManager = new TokenManager();
		
		turnCount = 1;
		score = 0;
		
		end = false;
		endCounter = players.size();
		
		deck = new Deck();
		grave = new Grave();
		upcards = new Upcards();
		
		scanner = new Scanner(System.in);
	}
	
	public void startGame() {
		initialHandout();
		
		while (!end) {
			Player currentPlayer = turnQueue.poll();
			playTurn(currentPlayer);
			turnQueue.add(currentPlayer);
		}
		
		scanner.close();
	}
	
	private void initialHandout() {
		for (Player player : players) {
			for (int i=0;i<5;i++) {
				player.getHand().add(deck.getTopCard());
			}
		}
	}
	
	private void playTurn(Player player) {
		showCards(player);
		
		System.out.println();
		System.out.println("Player " + player.getName() + "'s turn (turn " + turnCount + ")");
		System.out.println("Blue token : " + tokenManager.getBlueToken() + ", Red token : " + tokenManager.getRedToken());
		int choice = getPlayerChoice();
		
		switch (choice) {
		case 1:
			hintMenu();
			break;
		case 2:
			discardMenu(player);
			break;
		case 3:
			putMenu(player);
			break;
		}
		
		/*
		 * 카드 다썼으면 카운터 마이너스
		 */
		if (deck.getCount() == 0) {
			endCounter--;
		}
		
		/*
		 * 종료조건 확인
		 */
		if (score == 25 || endCounter == 0 || tokenManager.getRedToken() == 0) {
			/*
			 * 빨간토큰을 다썼거나, 점수를 25점 완성한경우
			 */
			end = true;
		}
		
		System.out.println();
	}
	
	private int getPlayerChoice() {
		int choice = -1;
		
		while(true) {
			System.out.println("-------------------------------");
			System.out.println("1. Give hint");
			System.out.println("2. Discard your card");
			System.out.println("3. Put your card on the board");
			System.out.println("-------------------------------");
			System.out.print("Choose your action : ");
		
			choice = scanner.nextInt();
			
			if (choice == 1 || choice == 2 || choice == 3) {
				break;
			} else {
				/*
				 * 잘못된 번호 선택
				 */
				System.out.println("Wrong choice ... please try again");
			}
		}
		
		return choice;
	}
	
	private void hintMenu() {
		Player targetPlayer;
		
		// 플레이어 이름 확인
		while (true) {
			System.out.print("Please input target player name : ");
			String input = scanner.next();
			
			targetPlayer = checkPlayerName(input);
			
			if (targetPlayer != null) {
				break;
			} else {
				/*
				 * 없는 플레이어
				 */
				System.out.println("Wrong name ... please try again");
			}
		}
		
		// 힌트 확인
		while (true) {
			int choice = 0;
			boolean valid = false;
			
			System.out.println("-------------------------------");
			System.out.println("1. Hint by color");
			System.out.println("2. Hint by number");
			System.out.println("3. Cancel");
			System.out.println("-------------------------------");
			System.out.print("Choose your hint type : ");
			
			choice = scanner.nextInt();
			
			switch (choice) {
			// 색깔기준
			case 1:
				while (true) {
					String input;
					System.out.println("[RED / BLUE / WHITE / YELLOW / GREEN]");
					System.out.print("Please input color name : ");
					input = scanner.next();
					
					if (input.equals("RED") || input.equals("BLUE") || input.equals("WHITE") || input.equals("YELLOW") || input.equals("GREEN")) {
						valid = hintManager.checkHint(Color.valueOf(input), targetPlayer);
						break;
					}
				}
				break;
				
			// 숫자 기준
			case 2:
				while (true) {
					int input;
					System.out.println("[1 / 2 / 3 / 4 / 5]");
					System.out.print("Please input number : ");
					input = scanner.nextInt();
					
					if (input >= 1 && input <= 5) {
						valid = hintManager.checkHint(input, targetPlayer);
						break;
					}
				}
				break;

			// 취소	
			case 3:
				return;
			default:
				/*
				 * 잘못된 번호 선택
				 */
				System.out.println("Wrong choice ... please try again");
				break;
			}
			
			if (valid) {
				tokenManager.useBlue();
				turnCount++;
				break;
			} else {
				/*
				 * 잘못된 힌트
				 */
				System.out.println("Wrong Hint ... please try again");
			}
		}
	}
	
	private Player checkPlayerName(String name) {
		for (Player player : players) {
			if (player.getName().equals(name)) {
				return player;
			}
		}
		
		return null;
	}
	
	private void discardMenu(Player currentPlayer) {
		while (true) {
			System.out.print("Please input which card to discard by number : ");
			int input = scanner.nextInt() - 1;
			
			if (input >= 1 && input <= currentPlayer.getHand().size()) {
				Card targetCard = currentPlayer.getHand().get(input);
				grave.addCard(targetCard);
				
				Card newCard = deck.getTopCard();
				
				if (newCard != null) {
					currentPlayer.getHand().set(input, newCard);
				} else {
					/*
					 * 남은 카드가 없음
					 */
				}
				
				break;
			} else {
				/*
				 * 없는 카드
				 */
				System.out.println("Wrong card number ... please try again");
			}
		}
		
		tokenManager.addBlue();
	}
	
	private void putMenu(Player currentPlayer) {
		while (true) {
			System.out.print("Please input which card to put on the board by number : ");
			int input = scanner.nextInt() - 1;
			
			if (input >= 0 && input <= currentPlayer.getHand().size()-1) {
				Card targetCard = currentPlayer.getHand().get(input);
				if (!upcards.putCard(targetCard)) {
					/*
					 * 현재 놓을 수 없는 카드임
					 */
					System.out.println("Unavailable to put ... red token used");
					System.out.println("Card " + targetCard + " sent to grave");
					tokenManager.useRed();
					grave.addCard(targetCard);
				} else {
					/*
					 * 카드 놓기 성공
					 */
					System.out.println("Card " + targetCard + " put on the board");
					score++;
					
					if (targetCard.getNum() == 5) {
						/*
						 * 5번 카드를 놓는데 성공한경우
						 */
						tokenManager.addBlue();
					}
				}

				Card newCard = deck.getTopCard();
				
				if (newCard != null) {
					currentPlayer.getHand().set(input, newCard);
				} else {
					/*
					 * 남은 카드가 없음
					 */
				}
				
				break;
			} else {
				/*
				 * 없는 카드
				 */
				System.out.println("Wrong card number ... please try again");
			}
		}
	}
	
	private void showCards(Player currentPlayer) {
		// 해당 플레이어의 카드
		int cnt = 1;
		for (Player player : players) {
			if (player.equals(currentPlayer)) {
				System.out.println("Your Cards");
				
				System.out.println("----------------------\nCard List");
				for (Card card : player.getHand()) {
					System.out.println("[" + cnt++ + "] " + card.printWithHint());
				}
				System.out.println("----------------------");
				break;
			}
		}
		
		// 다른 플레이어의 카드들
		for (Player player : players) {
			if (!player.equals(currentPlayer)) {
				System.out.println(player);
			}
		}

	}
	
	public static void main(String[] args) {
		ArrayList<Player> playerList = new ArrayList<Player>();
		playerList.add(new Player("A"));
		playerList.add(new Player("B"));
		
		GameManager gm = new GameManager(playerList);
		
		gm.startGame();
	}
}
