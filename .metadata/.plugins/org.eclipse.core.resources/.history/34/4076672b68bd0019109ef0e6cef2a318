package board;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;

import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter.DEFAULT;

import entity.Card;
import entity.Color;

public class Deck {
	private Stack<Card> cards;
	private int count;
	
	public Deck() {
		ArrayList<Card> DEFAULT_CARDS = new ArrayList<Card>();
		
		/* 
		 * 스탠다드 덱 세팅
		 */
		for (Color color : Color.values()) {
			for (int i=0;i<3;i++) {
				DEFAULT_CARDS.add(new Card(1,color));
				
				if (i>0) {
					DEFAULT_CARDS.add(new Card(2,color));
					DEFAULT_CARDS.add(new Card(3,color));
					DEFAULT_CARDS.add(new Card(4,color));
				}
				
				if (i>1) {
					DEFAULT_CARDS.add(new Card(5,color));
				}
			}
		}
		
		cards = new Stack<Card>();
		cards.addAll(DEFAULT_CARDS);
		shuffle();
		
		this.count = cards.size();
	}
	
	public int getCount() {
		return this.count;
	}
	
	public Card getTopCard() {
		if (count == 0) {
			/*
			 * 남은 카드 없음
			 */
			return null;
		}
		
		count--;
		return cards.pop();
	}
	
	public void shuffle() {
		ArrayList<Card> tempCards = new ArrayList<Card>();
		
		// 덱에 있는 카드를 tempCard에 옮기고
		while (!cards.isEmpty()) {
			tempCards.add(cards.pop());
		}
		
		// 랜덤 인덱스를 push
		while (!tempCards.isEmpty()) {
			int index = (int)(Math.random()*tempCards.size());
			cards.push(tempCards.remove(index));
		}
	}
	
	public void putCards(ArrayList<Card> newCards) {
		cards.addAll(newCards);
		this.count += newCards.size();
		
		shuffle();
	}
	
	public static void main(String[] args) {
		Deck testDeck = new Deck();
		
		while (testDeck.getCount()>0) {
			System.out.println(testDeck.getTopCard());
		}
	}
}
